apply from: "$rootDir/gradle/baseProject.gradle"


configurations {
    filterBundles {
        transitive = false
    }
    tomcat {
        transitive = false
    }
    glassfish {
        transitive = false
    }
    valve {
        transitive = false
    }
    rootWar {
        transitive = false
    }
    mocks {
        transitive = false
    }
}

dependencies {

    filterBundles project(path: ":repose-aggregator:components:filters:filter-bundle", configuration: "earFile"),
            project(path: ":repose-aggregator:experimental:experimental-filter-bundle", configuration: "earFile"),
            project(path: ":repose-aggregator:extensions:extensions-filter-bundle", configuration: "earFile"),
            "org.openrepose.filters.core.test:classloader-bundle-one:3.0",
            "org.openrepose.filters.core.test:classloader-bundle-two:3.0",
            "org.openrepose.filters.core.test:classloader-bundle-three:3.0",
            "org.openrepose.filters.core.test:classloader-bundle-four:3.0",
            "org.openrepose.filters.core.test:classloader-bundle-five:3.0"

    tomcat project(path: ":repose-aggregator:functional-tests:tomcat-support", configuration: "shadow")

    glassfish project(path: ":repose-aggregator:functional-tests:glassfish-support", configuration: "shadow")

    valve project(path: ":repose-aggregator:core:valve", configuration: "shadow")

    rootWar project(path: ":repose-aggregator:core:web-application", configuration: "warFile")

    mocks project(path: ":repose-aggregator:functional-tests:mocks-servlet", configuration: "warFile")

    compile project(":repose-aggregator:functional-tests:mocks-util"),
            project(":repose-aggregator:functional-tests:mocks-servlet"),
            project(":repose-aggregator:commons:utilities"),
            project(":repose-aggregator:core:core-lib"),
            project(":repose-aggregator:commons:configuration"),
            project(":repose-aggregator:services:datastore:api"),
            "org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2",
            "org.codehaus.jackson:jackson-core-lgpl:1.9.13",
            "joda-time:joda-time:2.2",
            "org.eclipse.jetty:jetty-server:$jettyVersion",
            "commons-lang:commons-lang:2.6",
            "commons-io:commons-io:2.4",
            "org.linkedin:org.linkedin.util-groovy:1.8.0",
            "org.apache.httpcomponents:httpclient:4.2.5",
            "org.rackspace:deproxy:0.21",
            "xerces:xerces-xsd11:2.12.0-rax",
            "commons-codec:commons-codec:1.8"
}

sourceSets {
    configs {
        resources {
            srcDir 'src/test/configs' //TODO: don't want to filter these
        }
    }
}

def reposeHome = "$buildDir/repose_home"

// Resource processing time!
//For the ReplaceTokens ant filter
import org.apache.tools.ant.filters.ReplaceTokens

def filterTokens = project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] }

filterTokens += [
        "repose.home"                : reposeHome,
        "repose.config.directory"    : "$buildDir/repose_home/configs",
        "repose.raw.config.directory": "$projectDir/src/test/configs",
        "repose.valve.jar.location"  : "$reposeHome/valve-$version-all.jar",
        "repose.config.templates"    : "$buildDir/resources/configs",
        "repose.root.war.location"   : "$reposeHome/ROOT.war",
        "target.hostname"            : "localhost",
        "repose.container"           : "valve"
].collectEntries { k, v -> [k.toString(), v.toString()] } //Stupid ancient ant tasks

processResources {
    //Hack all the properties to a toString value, because I don't care!
    filter(ReplaceTokens, tokens: filterTokens)
}

processTestResources {
    //Hack all the properties to a toString value, because I don't care!
    filter(ReplaceTokens, tokens: filterTokens)
}


test.enabled = false

task("test", overwrite: true) {
    doLast {
        println("I AM THE LIZARD KING")
    }
}

task("copyFilterBundles", type: Copy) {
    from configurations.filterBundles
    into "$reposeHome/artifacts"
}

task("copyTomcat", type: Copy) {
    from configurations.tomcat
    into "$reposeHome"
}

task("copyGlassfish", type: Copy) {
    from configurations.glassfish
    into reposeHome
}

task("copyValve", type: Copy) {
    from configurations.valve
    into reposeHome
}

task("copyRootWar", type: Copy) {
    from configurations.rootWar
    into reposeHome
}

task("copyMocksWar", type: Copy) {
    from configurations.mocks
    into reposeHome
}

tasks.build.dependsOn(["copyFilterBundles", "copyTomcat", "copyGlassfish", "copyValve", "copyRootWar", "copyMocksWar"])

task("integrationTests", type: Test) {
    dependsOn(["build"])
    description "Run *ALL* the integration tests"
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath + sourceSets.configs.runtimeClasspath
}

tasks.addRule("Pattern: iTest<ClassName>") {String taskName ->
    if(taskName.startsWith("iTest")) {
        def testClass = (taskName - "iTest")
        task(taskName, type: Test) {
            description("Run a single integration test")
            dependsOn(['build'])
            testClassesDir = sourceSets.test.output.classesDir
            classpath = sourceSets.test.runtimeClasspath + sourceSets.configs.runtimeClasspath
            include "**/${testClass}.*"

            testLogging {
                events 'started', 'passed'
            }
        }
    }
}