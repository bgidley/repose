/**
 * Look at all this JAXB. Look at it.
 *
 * apply this in your build.gradle per project to get jaxb stuff
 * It will automatically include the generated sources, as well as apply the XSL to all the schemas
 * TODO: move the xsl schema to a root parent level, rather than duplicating it in each project
 *
 * NOTE: you can override the XSLT to be applied using
 * project.ext.jaxbXsltFile = "path to xslt"
 * project.ext.jaxbSchemaBase = "path to xsd"
 * ----------> MUST BE SET BEFORE APPLYING THIS SCRIPT <----------
 */
configurations {
    jaxb //Need a jaxb configuration for the jaxb stuff
}

dependencies {
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41',
            'com.sun.xml.bind:jaxb-impl:2.2.7-b41',
            'javax.xml.bind:jaxb-api:2.2.7'
}

def generatedSources = "${projectDir}/build/src/generated-sources"
def jaxbSafeXSDSources = "${projectDir}/build/src/generated-xsd"

task transformXSDs() {
    description "Makes our XSDs safe for jaxb, because XSD 1.1, or just copy them if there's no XSD to translate"
    def targetDir = file(jaxbSafeXSDSources)
    def xsltFile = "${rootDir}/gradle/xsl/remove-1.1-elements.xsl"
    def schemaBaseDir = "$projectDir/src/main/resources/META-INF/schema"

    //If they set a property for the jaxbXSLT file override our default
    if (project.hasProperty('jaxbXsltFile')) {
        xsltFile = project.jaxbXsltFile
    }

    if (project.hasProperty('jaxbSchemaBase')) {
        schemaBaseDir = project.jaxbSchemaBase
    }

    //TODO: also add the XSD to this inputs, if the XSD changed
    inputs.files(
            fileTree(dir: schemaBaseDir, includes: ["**/*.xsd", "**/*.xjb"]),
            file(xsltFile)
    )
    outputs.dir jaxbSafeXSDSources

    doLast {
        targetDir.mkdirs()

        //Find all XSDs in the src/main/resources/META-INF.schema
        if (file(xsltFile).exists()) {
            logger.lifecycle("Transforming Schemas")
            ant.xslt(
                    extension: '.xsd',
                    basedir: schemaBaseDir,
                    includes: "**/*.xsd",
                    style: xsltFile,
                    destdir: "${jaxbSafeXSDSources}"
            )
        } else {
            logger.lifecycle("NOT Transforming Schemas")
            ant.copy(todir: jaxbSafeXSDSources) {
                fileset(dir: schemaBaseDir, includes: "**/*.xsd")

            }

        }

        //Copy over any bindings.xjb into their appropriate directories
        ant.copy(
                todir: jaxbSafeXSDSources
        ) {
            fileset(dir: schemaBaseDir, includes: "**/*.xjb")
        }
    }
}

task jaxb(dependsOn: 'transformXSDs') {
    description "compiles XSDs to classes"
    def jaxbTargetDir = file(generatedSources)
    inputs.source(jaxbSafeXSDSources)
    outputs.dir generatedSources

    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                extension: true //Some of our jaxb stuff requires extensions...
        ) {
            schema(dir: jaxbSafeXSDSources, includes: "**/*.xsd")
            binding(dir: jaxbSafeXSDSources, includes: "**/*.xjb")
        }
    }
}

//Have all compile tasks depend on the jaxb task
//NOTE: this guy's tasks need to know about the java, scala, and groovy plugins
[JavaCompile, ScalaCompile, GroovyCompile].collect { type ->
    tasks.withType(type) {
        dependsOn('jaxb')
    }
}

//Add it to your project's source sets
sourceSets.main.java.srcDirs += generatedSources